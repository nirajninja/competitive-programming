# include <bits/stdc++.h>

using namespace std;
# define ll long long
# define ld long double
# define rep(i,a,b) for(ll i=a;i<b;i++)
# define vi std::vector<int>
# define vll std::vector<ll>
# define vp vector <pair <ll,ll> >
# define vpp vector <pair <pair <ll,ll>,ll> >
# define pp pair <pair <ll,ll>,ll>
# define pb(x) push_back(x)
# define w(x) ll x=0; cin>>x; while(x--)
# define endl '\n'

void simple_as_Fuck(){
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  #ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin) ;
  freopen("output.txt", "w", stdout) ;
  #endif
}

class Node{
  public:
  char data;
  unordered_map<char,Node*>children;
  bool terminal;
   Node(char d)
   {
     data=d;
     terminal=false;
   }

};
class trie{
  Node *root;
  int cnt;
  public:
      trie()
      {
      root= new Node('\0');
      cnt=0;
      }

      void insert( char *w)
      { Node *temp=root;
          for(int i=0;w[i]!='\0';i++)
          { 
            char ch=w[i];
            if(temp->children.count(ch))
            {
              temp=temp->children[ch];
            }
            else{
              Node* n=new Node(ch);
              temp->children[ch]=n;
              temp=n;
            }

          }
          temp->terminal=true;
      }

      bool find(char *w)
      {
        Node* temp=root;
        for(int i=0;w[i]!=0;i++)
        {
          char ch=w[i];
          if(temp->children.count(ch)==0)
          {
            return false;
          }
          else{
            temp=temp->children[ch];
          }
        }
        return temp->terminal;
      }

  };
int32_t main()
{
	simple_as_Fuck();

  trie t;
  char words[][6]={"a","Hello","Fuck"};
  for(int i=0;i<3;i++)
  {
    t.insert(words[i]);
  }

  char w[10];
  cin>>w;
  if(t.find(w)){
    cout<<"PRESENT"<<endl;
  }
  else{
    cout<<"NO"<<endl;
  }

	return 0;
}