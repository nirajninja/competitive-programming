#include<iostream>
#include<list>
using namespace std;
class graph{
    int V;
    list<pair<int,int>>l;
    public:
    graph(int V)
    {
        this->V=V;

    }
    void addEdge(int u,int v)
    {
        l.push_back(make_pair(u,v));

    }

    int findSet(int i,int parent[])
        {
            if(parent[i]==-1)
            {
                    return i;
            }
            return parent[i]=findSet(parent[i],parent);
        }

      void union_set(int x,int y,int parent[],int rank[]){

          int s1=findSet(x,parent);
          int s2=findSet(y,parent);
          if(s1!=s2)
          {
              if(rank[s1]<rank[s2])
              {
                  parent[s1]=s2;
                  rank[s2]+=rank[s1];
              }
              else{
                  parent[s2]=s1;
                  rank[s1]+=rank[s2];
              }
          }
      }

     /* bool containCylce()
      {
          int *parent=new int [V];
          for(int i=0;i<V;i++)
          {
              parent[i]=-1;
          }

          for(auto edge:l)
          {
              int i=edge.first;
              int j=edge.second;
              int s1=findSet(i,parent);
              int s2=findSet(j,parent);
              if(s1!=s2)
              {
                  union_set(s1,s2,parent);
              }
              else{
                  cout<<"same parent"<<s1<<" "<<s2<<endl;
                  return true;
              }
             
          }
           return false;
      }  */



      int pairing()
      {
          int *parent=new int[V];
          int *rank=new int[V];
          for(int i=0;i<V;i++)
          {
              parent[i]=-1;
              rank[i]=1;

          }
          int ans;
          for(auto edge:l)
          {
              int i=edge.first;
              int j=edge.second;
              int s1=findSet(i,parent);
              int s2=findSet(j,parent);
              union_set(s1,s2,parent,rank);

          }

          ans=0;
          for(int i=0;i<V;i++)
          {
              ans+=V-rank[findSet(i,parent)];
          }
            delete [] parent;
            delete [] rank;
          return ans/2;


      }
};
int main()
{
   //int    cout<<g.containCylce();

int n,m;
cin>>n>>m;
graph g(n);
while(m--)
{
    int x,y;
    cin>>x>>y;
    g.addEdge(x,y);

}
cout<<g.pairing()<<endl;
 return 0;

}
